import org.gradle.api.tasks.Exec
import org.apache.tools.ant.taskdefs.condition.Os



apply plugin: 'java'
apply plugin: 'war'

repositories {
    mavenCentral()
}

dependencies {
    	compile 'org.slf4j:slf4j-api:1.7.5'
	providedCompile 'javax.servlet:servlet-api:2.5'
	runtime 'javax.servlet:jstl:1.1.2'	
    	testCompile "junit:junit:4.11"
}

class GruntTask extends Exec {
	private String gruntExecutable = Os.isFamily(Os.FAMILY_WINDOWS) ? "grunt.cmd" : "grunt"
	def gruntArgs = ""
	def output = new ByteArrayOutputStream()
	def File outputFile = null

	public GruntTask() {
		super()
		this.setExecutable(gruntExecutable)
		// Don't fail immediately after executing the command, we must save the output to a file first...
		this.setIgnoreExitValue(true)
		// Capture output...
		this.setStandardOutput(output)
		this.setErrorOutput(output)
	}

	public void setGruntArgs(String gruntArgs) {
		this.args = "$gruntArgs".trim().split(" ") as List
		// Construct an output file name with gruntArgs...
		def reportsDir = new File("./reports")
		this.outputFile = new File(reportsDir, gruntArgs +".txt")
		this.outputs.file outputFile
		// After executing command...
		this.doLast {
				// Save output to a file
				output.close()
				outputFile.parentFile.mkdirs()
				outputFile.text = output.toString()
				// Log errors (if any)
				def result = getExecResult()
				if (result.exitValue != 0) {
					logger.error(output.toString())
				// Fail build if Grunt failed
				result.assertNormalExitValue()
			}
		}
	}
}

task npm(type: Exec) {
   group = "Build"
   description = "Installs all Node.js dependencies defined in package.json"
   commandLine = ["npm", "install"]
}

task jasmine(type: GruntTask) {
   group = "Verification"
   description = "Runs the Jasmine tests."
   gruntArgs = "jasmine"
}

task explodedWar(type: Copy) {
    into "./build/exploded"
    with war
}


war.dependsOn explodedWar
jasmine.dependsOn npm


